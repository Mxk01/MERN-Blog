/*
The bearer token is a cryptic string, usually generated by the server in response to a login request. 
The client must send this token in the Authorization header when making requests to protected resources: 
Authorization: Bearer <token>

*/
let User = require('../models/User');
let jwt = require('jsonwebtoken');

require('dotenv').config();
 module.exports = (req,res,next) => {
    // Authorization is set up in req headers
    // its value is  Bearer  09akmdsa09029 (some token)
    // we destructure so we can get that value
//   const {authorization} = req.headers;
//   // authorization == Bearer,woaaekoaas (token) 



//   // check if authorization is empty
//   if(!authorization){
//    return res.status(401).json({error:"You must be logged in to access this"})
//   }

//   // 
//   const token = authorization.replace("Bearer ","")
//   // jwt.verify
//   // takes in 3 arguments :
//   // a  token 
//   // a secret
//   // a callback
//   jwt.verify(token,process.env.jsonJWT_SECRET,(err,payload)=>{
//     if(err)
//     {
//         return  res.status(401).json({error:'You must be logged in '})
//     }
//  // payload parameter is whatever we sent in JWT.sign aside from
//  // secret
//  // E.g  jwt.sign({_id:a9di0a},SECRET_KEY); 
// // payload._id  will be a9di0a
//  let {_id} = payload;

const {authorization} = req.headers;
// authorization == Bearer,woaaekoaas (token) 



// check if authorization is empty
if(!authorization){
 return res.status(401).json({error:"You must be logged in to access this"})
}

// 
const token = authorization.replace("Bearer ","")
// jwt.verify
// takes in 3 arguments :
// a  token 
// a secret
// a callback
jwt.verify(token,process.env.JWT_SECRET,(err,payload)=>{
  if(err)
  {
      return  res.status(401).json({error:'You must be logged in '})
  }



// payload parameter is whatever we sent in JWT.sign aside from
// secret
// E.g  jwt.sign({_id:a9di0a},SECRET_KEY); 
// payload._id  will be a9di0a
let {_id} = payload;


 User.findById(_id).then((userData)=>{
   /*Also, anything stored within req will only be available in the request itself, another request will have its own req instance, so data is not shared and should not leak to another request unless purposely made to do so.
   */
   
   req.user = userData;
    next();
 })
 
//   })
})

}